#!/bin/bash

set -e

DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"

source_dir(){
mkdir -p "${SRC}"
cp -f board.txt "${SRC}"/
cd "${SRC}"
}

compiler(){
# install depends
if [ "$CCACHE" -eq 1 ]; then
	command -v ccache || apt install -y ccache
fi
if [ "$CLANG" -eq 1 ]; then
	if [[ "$HOST_CODENAME" == "bookworm" || "$HOST_CODENAME" == "jammy" ]]; then
		( command -v clang-14 && command -v clang-15 ) || apt install -y clang clang-14 clang-15 lld lld-14 lld-15 llvm
	else
		echo -e "${HOST_CODENAME} is not supported."
		exit 1
	fi
fi
if [ "$CCACHE" -eq 1 ]; then
	DEST="/usr/lib/ccache"
	NATIVE="CC=${DEST}/${GCC_VERSION}"
	CROSS="CC=${DEST}/${CROSS_COMPILE}${GCC_VERSION}"
fi
if [ "$CLANG" -eq 1 ]; then
	NATIVE="CC=${CLANG_VERSION} ${CLANG_LLVM}"
	if [[ "$BOARD" == "bcm2708" ]]; then
		DEST="/usr/bin"
		CROSS="CC=${DEST}/${CLANG_VERSION}"
	else
		CROSS="CC=${CLANG_VERSION} ${CLANG_LLVM}"
	fi
fi
if [ "$GCC" -eq 1 ]; then
	DEST="/usr/bin"
	NATIVE="CC=${DEST}/${GCC_VERSION}"
	CROSS="CC=${DEST}/${CROSS_COMPILE}${GCC_VERSION}"
fi
}

noinitrd(){ # no longer used
sed -i 's/export INITRD=$want_initrd/export INITRD=No/g' scripts/package/builddeb
sed -i 's/export INITRD=$(if_enabled_echo CONFIG_BLK_DEV_INITRD Yes No)/export INITRD=No/g' scripts/package/builddeb
}

userpatches(){
if [[ $(ls ../../userpatches/*.patch) ]] > /dev/null 2>&1; then
	echo_patch
	for i in ../../userpatches/*.patch; do patch -p1 < "$i"; done
	echo_done
	echo
fi
}

firmware(){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p firmware
rm -f firmware/*
cd firmware
echo
echo_firm
${DOWNLOAD} ${BINURL}LICENCE.broadcom
${DOWNLOAD} ${BINURL}COPYING.linux
if [[ "$BOARD_EXT" == "rpi-4" ]]; then
	${DOWNLOAD} ${BINURL}fixup4.dat
	${DOWNLOAD} ${BINURL}fixup4cd.dat
	${DOWNLOAD} ${BINURL}fixup4db.dat
	${DOWNLOAD} ${BINURL}fixup4x.dat
	${DOWNLOAD} ${BINURL}start4.elf
	${DOWNLOAD} ${BINURL}start4cd.elf
	${DOWNLOAD} ${BINURL}start4db.elf
	${DOWNLOAD} ${BINURL}start4x.elf
	cd ..
	if [[ $(ls firmware/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf,LICENCE.broadcom,COPYING.linux}) ]] > /dev/null 2>&1; then
		echo_bdone
	else
		echo_fail
		exit 0
	fi
else
	${DOWNLOAD} ${BINURL}bootcode.bin
	${DOWNLOAD} ${BINURL}fixup.dat
	${DOWNLOAD} ${BINURL}fixup_cd.dat
	${DOWNLOAD} ${BINURL}fixup_db.dat
	${DOWNLOAD} ${BINURL}fixup_x.dat
	${DOWNLOAD} ${BINURL}start.elf
	${DOWNLOAD} ${BINURL}start_cd.elf
	${DOWNLOAD} ${BINURL}start_db.elf
	${DOWNLOAD} ${BINURL}start_x.elf
	cd ..
	if [[ $(ls firmware/{bootcode.bin,fixup.dat,fixup_cd.dat,fixup_db.dat,fixup_x.dat,start.elf,start_cd.elf,start_db.elf,start_x.elf,LICENCE.broadcom,COPYING.linux}) ]] > /dev/null 2>&1; then
		echo_bdone
	else
		echo_fail
		exit 1
	fi
fi
}

download(){
RPIURL="https://github.com/raspberrypi/linux/archive/"
echo ""
if [[ -f "${KERNEL}-${VERSION}.tar.gz" ]]; then
	:;
else
	echo_kernel
	"${DOWNLOAD}" "${RPIURL}rpi-${VERSION}.tar.gz"
	echo_bdone
fi
extra_wireless
}

extract(){
echo ""
echo_extract
pv "${KERNEL}-${VERSION}.tar.gz" | tar -xzf - -C .
}

setup(){
cd "${KERNEL}-${VERSION}"
if [ "$RTL88XXAU" -eq 1 ]; then
	rtl8812au
fi
if [ "$RTL88X2BU" -eq 1 ]; then
	rtl88x2bu
fi
if [ "$RTL88XXCU" -eq 1 ]; then
	rtl8811cu
fi
export ARCH=${ARCH}
if [[ "$ARCH" == "arm" ]]; then
	KERNEL="${KERNEL_VAR}"
fi
}

cconfig(){
echo_cconfig
if [[ -f "../../defconfig/${MYCONFIG}" ]]; then
	cp -f ../../defconfig/"${MYCONFIG}" arch/"${ARCH}"/configs/
else
	echo
	echo -e "${MYCONFIG} was not found."
	echo -e "Check that the name is correct and in the correct location."
	echo -e "If you believe you are receiving this in error, please report it."
	read -p "Press enter to continue."
	exit 1
fi
if [ "$CROSSCOMPILE" -eq 1 ]; then
	make -j"${CORES}" KBUILD_DEBARCH="${DEBARCH}" ARCH="${ARCH}" "${CROSS}" CFLAGS="${CFLAGS}" CROSS_COMPILE="${CROSS_COMPILE}" "${MYCONFIG}"
else
	make -j"${CORES}" KBUILD_DEBARCH="${DEBARCH}" ARCH="${ARCH}" "${NATIVE}" CFLAGS="${CFLAGS}" "${MYCONFIG}"
fi
echo_done
}

fconfig(){
echo -e "${WHT}Making ${LINUX_DEFCONFIG}${FIN}."
edit_defconfig
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
if [ "$LTO_CLANG_THIN" -eq 1 ]; then
	echo "CONFIG_LTO_CLANG_THIN=y" >> "arch/${ARCH}/configs/${LINUX_DEFCONFIG}"
fi
if [ "$CROSSCOMPILE" -eq 1 ]; then
	make -j"${CORES}" KBUILD_DEBARCH="${DEBARCH}" ARCH="${ARCH}" "${CROSS}" CFLAGS="${CFLAGS}" CROSS_COMPILE="${CROSS_COMPILE}" "${LINUX_DEFCONFIG}"
else
	make -j"${CORES}" KBUILD_DEBARCH="${DEBARCH}" ARCH="${ARCH}" "${NATIVE}" CFLAGS="${CFLAGS}" "${LINUX_DEFCONFIG}"
fi
echo_done
}

menuconfig(){
echo ""
echo_menuconfig
sleep 1s
if [ "$CROSSCOMPILE" -eq 1 ]; then
	make -j"${CORES}" KBUILD_DEBARCH="${DEBARCH}" ARCH="${ARCH}" "${CROSS}" CFLAGS="${CFLAGS}" CROSS_COMPILE="${CROSS_COMPILE}" menuconfig
else
	make -j"${CORES}" KBUILD_DEBARCH="${DEBARCH}" ARCH="${ARCH}" "${NATIVE}" CFLAGS="${CFLAGS}" menuconfig
fi
}

ccompile(){
echo -e "-- ${GRN}CC${FIN}"
echo_build
echo "${BUILD_VERSION}" > .version
echo 'y' | make -j"${CORES}" KBUILD_DEBARCH="${DEBARCH}" ARCH="${ARCH}" KBUILD_BUILD_USER="${KBUSER}" KBUILD_BUILD_HOST="${KBHOST}" "${CROSS}" CFLAGS="${CFLAGS}" CROSS_COMPILE="${CROSS_COMPILE}" bindeb-pkg
}

ncompile(){
echo -e "-- ${GRN}NC${FIN}"
echo_build
echo "${BUILD_VERSION}" > .version
echo 'y' | make -j"${CORES}" KBUILD_DEBARCH="${DEBARCH}" ARCH="${ARCH}" KBUILD_BUILD_USER="${KBUSER}" KBUILD_BUILD_HOST="${KBHOST}" "${NATIVE}" CFLAGS="${CFLAGS}" bindeb-pkg
}

packaging(){
echo ""
rm -f scripts/package/{builddeb,mkdebian}
cp -fr ../../packaging/{builddeb,mkdebian} scripts/package/
chmod +x scripts/package/{builddeb,mkdebian}
cp -f ../../packaging/headers-byteshift.patch headers-byteshift.patch
userpatches
linux_packaging
}
